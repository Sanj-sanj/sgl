---
interface Props {
  orientation: "horizontal" | "vertical";
}

const { orientation } = Astro.props;
---

<nav>
  <ul
    class:list={[
      ` flex text-center items-center`,
      `${orientation === "vertical" && "flex-col items-center w-full justify-evenly"}`,
    ]}
  >
    <li
      class:list={`sm:ml-2.5 text-center px-2 relative flex${orientation === "vertical" && "w-full py-4"}`}
    >
      <a href="/">Home</a>
    </li>

    <li
      class:list={`sm:ml-2.5 text-center px-2 relative flex${(orientation === "vertical" && "w-full py-4") || ""}`}
    >
      <a href="/" data-dropdown="true" id="About"> About </a>
      <span
        class="hidden absolute bg-pink-500 top-1/2 left-1/2 w-full min-w-24"
        style={{ transform: "translate(-50%, 10%)" }}
        data-dropdown="true"
        id="About"
      >
        <ul class="w-full" id="About">
          <li id="About">About</li>
          <li id="About">Environment Policy</li>
          <li id="About">Environicy</li>
          <li id="About">Onment</li>
        </ul>
      </span>
    </li>

    <li
      class:list={`sm:ml-2.5 text-center px-2 relative flex${(orientation === "vertical" && "w-full py-4") || ""}`}
    >
      <a href="/" data-dropdown="true" id="Careers"> Careers </a>
      <span
        class="hidden absolute bg-pink-500 top-1/2 left-1/2 w-full min-w-24"
        style={{ transform: "translate(-50%, 10%)" }}
        data-dropdown="true"
        id="Careers"
      >
        <ul class="w-full" id="Careers">
          <li id="Careers">Driver Admission Form</li>
          <li id="Careers">Environicy</li>
          <li id="Careers">Onment</li>
          <li id="Careers">stuff</li>
        </ul>
      </span>
    </li>

    <li
      class:list={`sm:ml-2.5 text-center px-2${(orientation === "vertical" && "w-full py-4") || ""}`}
    >
      <a href="/"> Contact Us </a>
    </li>
  </ul>
</nav>

<script>
  let timerId: null | number = null;
  const aTags = document.querySelectorAll("a");

  aTags?.forEach((aEl) =>
    aEl.addEventListener("mouseenter", (e) => {
      const anchor = e.target as HTMLAnchorElement;

      if (anchor.dataset.dropdown === "true") {
        anchor.nextElementSibling?.classList.toggle("hidden");

        const cleanupFunction = (e: MouseEvent) => {
          console.log("clean");
          const relevantElements = e.target as HTMLElement;
          console.log(1, relevantElements.id, 2, anchor.id);
          if (relevantElements.id !== anchor.id) {
            if (timerId) return;

            timerId = setTimeout(() => {
              console.log("timing");
              document.removeEventListener("mousemove", cleanupFunction);
              anchor.nextElementSibling?.classList.toggle("hidden");
              clearTimeout(timerId as number);
              timerId = null;
            }, 250);
          }
        };
        document.addEventListener("mousemove", cleanupFunction);
      }
    }),
  );
</script>
